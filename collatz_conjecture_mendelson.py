# -*- coding: utf-8 -*-
"""Collatz Conjecture Mendelson.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sK5j98CPKI7GlxEXMQO7jL8Q4lQVLr_a
"""



#Danny Mendelson
#Collatz Conjecture

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns

#collatz function
def collatz(x):
    sequence = []
    while x != 1:
        sequence.append(x)
        if x % 2 == 0:
            x = x // 2
        else:
            x = 3 * x + 1
    sequence.append(1)
    return sequence

#exploratory analysis

#compute Collatz sequence lengths for integers from 1 to 10,000
sequenceLengths = []
maxValues = []
meanValues = []
halfwayPoints = []

for i in range(1, 10001):
    sequence = collatz(i)
    sequenceLengths.append(len(sequence))
    maxValues.append(max(sequence))
    meanValues.append(np.mean(sequence))
    halfwayPoints.append(sequence[len(sequence) // 2])

# Data Visualization

#plot sequence lengths
plt.figure(figsize=(12, 6))
plt.plot(range(1, 10001), sequenceLengths)
plt.title('Collatz Sequence Lengths for Integers 1 to 10,000')
plt.xlabel('Starting Integer')
plt.ylabel('Sequence Length')
plt.show()

#visualize specific sequences: longest, mid-range, and shortest sequences
longestSeqNum = np.argmax(sequenceLengths) + 1
shortestSeqNum = np.argmin(sequenceLengths) + 1
midRangeSeqNum = int(len(range(1, 10001)) // 2)

#function to generate and plot Collatz sequences
def plotCollatzSequence(n):
    sequence = collatz(n)  # Generate the sequence
    plt.plot(range(len(sequence)), sequence, label=f'Starting Number: {n}')

#plotting the sequences for these numbers
plt.figure(figsize=(12, 6))
plotCollatzSequence(longestSeqNum)
plotCollatzSequence(midRangeSeqNum)
plotCollatzSequence(shortestSeqNum)

plt.title('Collatz Sequences for Selected Numbers')
plt.xlabel('Step')
plt.ylabel('Value')
plt.legend()
plt.show()

#dataset creation
collatzData = pd.DataFrame({
    'Number': range(1, 10001),
    'SequenceLength': sequenceLengths,
    'FinalHalfwayPoint': halfwayPoints,
    'MaxValueInSequence': maxValues,
    'MeanValueInSequence': meanValues
})

#save the dataset to a CSV file
collatzData.to_csv('collatz_data.csv', index=False)

#optimization: Enhance the Collatz function for better performance
def optimizedCollatz(n, cache={1: [1]}):
    if n in cache:
        return cache[n]

    if n % 2 == 0:
        nextN = n // 2
    else:
        nextN = 3 * n + 1

    cache[n] = [n] + optimizedCollatz(nextN, cache)
    return cache[n]

#extended dataset creation with optimized function
extendedSequenceLengths = []
for i in range(1, 10001):
    sequence = optimizedCollatz(i)
    extendedSequenceLengths.append(len(sequence))

#save extended dataset to a CSV file
collatzData['OptimizedSequenceLength'] = extendedSequenceLengths
collatzData.to_csv('extended_collatz_data.csv', index=False)

#checking potential correlations
correlationMatrix = collatzData.corr()

#displaying the correlation matrix
print(correlationMatrix)

#visualization of Correlations
plt.figure(figsize=(10, 8))
plt.title('Correlation Matrix for Collatz Dataset')
sns.heatmap(correlationMatrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.show()


"""Help from ChatGPT"""