# -*- coding: utf-8 -*-
"""Mendelson PlayfairCipheripynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vp8137_lK548hcB5qXt6zlZ8iIqMW9vi

###List all your references, including people that helped you, in this text box below.


x:  for extend method: https://statisticsglobe.com/append-2d-list-python#:~:text=Example%202%3A%20Add%20New%20Element%20to%202D%20List%20Using%20extend()%20Method,-In%20this%20next&text=Much%20like%20the%20append(),it%20in%20the%202D%20list.

 W3 schools for "end" function
 W3 schools for 2d list information



###Copy and paste your commented code below.
"""

#Danny Mendelson
#Playfair Cipher

 #returns 5x5 matrix with ordered characters based on key
def getTable():

    # input the key
    key = input("Enter Key: ").lower().replace("j","i").replace(" ","")
    table = []

    #adding key to table
    for char in key:
        if char not in table:
            table.append(char)

     #adding the rest of the letters
    letters = "abcdefghiklmnopqrstuvwxyz"
    for char in letters:
        if char not in table:
            table.append(char)

    table = [table[i:i+5] for i in range(0,25,5)]
    return table


#break the message into diagrams
def diagrams():

    #getting message
    message = list(input("Enter Message: ").lower().replace("j","i").replace(" ", ""))

    #adding x and checking if x so then add i
    x = 0
    while x< len(message)-1:
        if(message[x]==message[x+1]):
            if(message[x] != "x"):
                message.insert(x+1, "x")
            else:
                message.insert(x+1,"i")
        x += 2

    #break up into diagrams
    message = [message[i:i+2]for i in range(0,len(message), 2)]

    num = len(message)-1


    #adding last letter
    if len(message[num]) == 1:
        if message[len(message)-1][0] != "x":
            message[num].append("x")
        else:
            message[num].append("i")

    return message

#finds pos of 2d matrix
def findPos(table, let):
    for x in range(len(table)):
        for o in range(len(table[x])):
            if(table[x][o]==let):
                return x,o

#the actual encryption
def encrypt():

    table = getTable()
    diagram = diagrams()

    for o in range(len(diagram)):
        x1,y1 = findPos(table,diagram[o][0])
        x2,y2 = findPos(table,diagram[o][1])
        #case 1
        if((x1 != x2) and (y1!= y2)):
            diagram[o][0] = table[x1][y2]
            diagram[o][1] = table[x2][y1]
        #case 2
        elif(x1 == x2):
            diagram[o][0] = table[x1][(y1+1)%5]
            diagram[o][1] = table[x2][(y2+1)%5]
        #case 3
        else:
            diagram[o][0] = table[(x1+1)%5][y1]
            diagram[o][1] = table[(x2+1)%5][y2]
    return diagram

print()

#main function to call
def main():
    diagram = encrypt()
    for x in range(len(diagram)):
        print("".join(diagram[x]), end = "")
        print(" ", end = "")


#et voila
main()








"""

Sources
 for extend method: https://statisticsglobe.com/append-2d-list-python#:~:text=Example%202%3A%20Add%20New%20Element%20to%202D%20List%20Using%20extend()%20Method,-In%20this%20next&text=Much%20like%20the%20append(),it%20in%20the%202D%20list.
 W3 schools for "end" function
 W3 schools for 2d list information

"""

"""###List the test data that failed.  One per line.
**All test data worked for me**
###Use ChatGPT to solve one subtask of this project.  
###Put your link to your ChatGPT conversation here.

x:https://chat.openai.com/share/6fc45cf5-d667-47a0-a03d-a15dc3a139eb  

###What did you learn or like about from ChatGPT's answer?
###Please put your response to this question in **bold**.

**ChatGPT uses commands and functions that I was not familiar with before. Since it knows more things than I know about the Python language, it can shorten my code by using built-in functions in the Python library. For example, it uses a lot of list comprehension which is much more efficient than traversing through data sets to add values to lists by using nested loops. Additionally, ChatGPT used a dictionary where I used a 2D list to build my table. I hadn’t thought of this idea and while I still would use a 2D list, I thought it was interesting that I made that decision. ChatGPT also returned the None data type in its findChar function which I did not think of. I presume it did this to add a layer of error checking whereas my code assumes the value will always be in the matrix. Overall, the code was roughly similar to mine. It had one more function than me to create a table whereas I just used a get table function with a get key function embedded into it. Furthermore, it added x’s and i’s, in my opinion, less efficiently than I did. ChatGPT’s code featured a lot of list indexing whereas I used more conditional statements to judge which letter was added at which place. Lastly, ChatGPT's code was roughly 20 lines less than mine which was impressive.**
"""